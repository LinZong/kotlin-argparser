// Copyright Â© 2016 Laurence Gonsalves
//
// This file is part of kotlin-argparser, a library which can be found at
// http://github.com/xenomachina/kotlin-argparser
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by the
// Free Software Foundation; either version 2.1 of the License, or (at your
// option) any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
// for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library; if not, see http://www.gnu.org/licenses/

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$gradle_bintray_version"
        classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
    }
}

plugins {
    id 'com.palantir.git-version' version '0.12.0-rc2'
    id 'org.jmailen.kotlinter' version '1.12.0'
}

apply plugin: 'maven'
apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: "io.gitlab.arturbosch.detekt"

assert name == 'kotlin-argparser'
description = 'Concise, easy, powerful and robust command line argument parsing for Kotlin'

group 'com.xenomachina'
version = '2.0.9-SNAPSHOT'

project.ext {
    githubUser = "xenomachina"
    vcsDev = "https://github.com/$githubUser"
    githubRepo = "$githubUser/$name"
    vcsUrl = "https://github.com/$githubRepo"
}

sourceCompatibility = 1.6

repositories {
    mavenCentral()
    jcenter()
}

test {
  useJUnitPlatform()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "com.xenomachina:xenocom:$xenocom_version"

    testCompile "io.kotlintest:kotlintest-runner-junit5:$kotlintest_version"
    testCompile "org.slf4j:slf4j-simple:$slf4j_version"
    // This is to ensure that kotlintest uses the correct version of
    // kotlin-reflect
    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

//////////////////////////////////////////////////////////////////////////////
// Detekt config
//////////////////////////////////////////////////////////////////////////////

detekt {
    // remove this when plugin stops choosing latest version by default
    version = "$detekt_version"

    defaultProfile {
        input = file("src/main/kotlin")

        filters = ".*/resources/.*,.*/build/.*"
        config = file("detekt.yml")
    }
}

//////////////////////////////////////////////////////////////////////////////
// Dokka config
//////////////////////////////////////////////////////////////////////////////

dokka {
    moduleName = project.name

    // TODO: includes = ['Module.md']

    linkMapping {
        dir = "src/main/kotlin"
        url = "$project.ext.vcsUrl/blob/master/src/main/kotlin"
        suffix = "#L"
    }
    sourceDirs = files('src/main/kotlin')
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = javadoc.destinationDir

    linkMapping {
        dir = "src/main/kotlin"
        url = "$project.ext.vcsUrl/blob/master/src/main/kotlin"
        suffix = "#L"
    }
    sourceDirs = files('src/main/kotlin')
}


//Based on comment by @jnizet at https://github.com/Kotlin/dokka/issues/42
task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}


def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : 'https://oss.sonatype.org/content/repositories/snapshots/'
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ''
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ''
}

if (System.env.CI != "true") {
    // Some of the stuff in here can break continuous integration, and none of
    // it is necessary in CI.

    //////////////////////////////////////////////////////////////////////////////
    // POM config
    //////////////////////////////////////////////////////////////////////////////

    def pomConfig = {
        packaging 'jar'

        name project.name
        description project.description
        url project.ext.vcsUrl

        scm {
            connection "scm:git:$project.ext.vcsUrl"
            developerConnection "scm:git:$project.ext.vcsDev"
            url "$project.ext.vcsUrl"
        }

        licenses {
            license {
                name "GNU Lesser General Public License, Version 2.1"
                url "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt"
                distribution "repo"
            }
        }

        developers {
            developer {
                id "xenomachina"
                name "Laurence Gonsalves"

                // State-of-the art anti-scraper encryption. ;-)
                email "moc.anihcamonex@ecnerual".reverse()
            }
        }
    }

    //////////////////////////////////////////////////////////////////////////////
    // Maven Central upload
    //////////////////////////////////////////////////////////////////////////////

    signing {
//        useGpgCmd()
//        sign configurations.archives
    }

    def ossrhUsernameOrEmpty = getRepositoryUsername()
    def ossrhPasswordOrEmpty = getRepositoryPassword()

    uploadArchives {
        repositories {
            mavenDeployer {
//                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: ossrhUsernameOrEmpty, password: ossrhPasswordOrEmpty)
                }

                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: ossrhUsernameOrEmpty, password: ossrhPasswordOrEmpty)
                }

                pom.project pomConfig
            }
        }
    }

    //////////////////////////////////////////////////////////////////////////////
    // bintray upload
    //////////////////////////////////////////////////////////////////////////////

    // Based on https://github.com/bintray/gradle-bintray-plugin
    bintray {
      user = System.getenv('BINTRAY_USER')
      key = System.getenv('BINTRAY_KEY')

      pkg {
        repo = 'maven'
        name = project.name
        desc = project.description

        licenses = ['LGPL-2.1']
        vcsUrl = "$project.ext.vcsUrl"
        websiteUrl = "$project.ext.vcsUrl"
        issueTrackerUrl = "$project.ext.vcsUrl/issues"
        githubRepo = project.ext.githubRepo
        githubReleaseNotesFile = 'CHANGELOG.md'

        version {
          name = project.version
          desc = "$project.name version $project.version"
          released = new Date()
          vcsTag = "$project.version"
        }
      }

      publications = ['MyPublication']
    }

    // Create the publication with the pom configuration:
    publishing {
        publications {
            MyPublication(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom.withXml {
                    def root = asNode()
                    root.children().last() + pomConfig
                }
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////////////
// jacoco (codecov.io) plugin config
//////////////////////////////////////////////////////////////////////////////

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}
